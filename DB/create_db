var SQL = require('./db');
const path = require('path');
const csv=require('csvtojson');
const e = require('express');

const CreateTable_DoggySitters = (req,res)=> {
    
    var Q1 = "CREATE TABLE DoggySitters (email VARCHAR(50) NOT NULL PRIMARY KEY, fullName VARCHAR(50) NOT NULL, phoneNumber VARCHAR(10) NOT NULL, password VARCHAR(50) NOT NULL, area ENUM ('Northern district', 'Central District', 'Southern District'), description VARCHAR(400), picture BLOB, averageRating FLOAT, numberOfRatings INT)";
    SQL.query(Q1,(err,mySQLres)=>{
        if (err) {
            console.log("error ", err);
            return;
        }
        console.log('DoggySitters table created succesfully');
        res.send('DoggySitters database created successfully')
    })    
}

const DropTable_DoggySitters = (req, res) => {
  const query = "DROP TABLE IF EXISTS DoggySitters";
  
  SQL.query(query, (err, result) => {
    if (err) {
      console.log("Error: ", err);
      res.status(500).send("An error occurred while dropping the DoggySitters table.");
      return;
    }
    
    console.log("DoggySitters table dropped successfully");
    res.send("DoggySitters table dropped successfully");
  });
};


const CreateTable_Dogs = (req, res) => {
  const Q3 = "CREATE TABLE Dogs (dogName VARCHAR(50) NOT NULL, dogAge INT NOT NULL, dogSize ENUM('Small', 'Medium', 'Large'), dogNotes VARCHAR(200), dogPicture BLOB, ownerId INT, FOREIGN KEY (owner) REFERENCES DogOwners(email))";

  SQL.query(Q3, (err, mySQLres) => {
    if (err) {
      console.log("error", err);
      return;
    }
    console.log('Dogs table created successfully');
    res.send('Dogs database created successfully');
  });
};

const DropTable_Dogs = (req, res) => {
  const query = "DROP TABLE IF EXISTS Dogs";
  
  SQL.query(query, (err, result) => {
    if (err) {
      console.log("Error: ", err);
      res.status(500).send("An error occurred while dropping the Dogs table.");
      return;
    }
    
    console.log("Dogs table dropped successfully");
    res.send("Dogs table dropped successfully");
  });
};



const CreateTable_DogOwners = (req, res) => {
  const Q2 = "CREATE TABLE DogOwners (email VARCHAR(50) NOT NULL PRIMARY KEY, fullName VARCHAR(50) NOT NULL, phoneNumber VARCHAR(10) NOT NULL,  password VARCHAR(50) NOT NULL, address VARCHAR(100) NOT NULL)";

  SQL.query(Q2, (err, mySQLres) => {
    if (err) {
      console.log("error", err);
      return;
    }
    console.log('DogOwners table created successfully');
    res.send('DogOwners database created successfully');
  });
};

const DropTable_DogOwners = (req, res) => {
  const query = "DROP TABLE IF EXISTS DogOwners";
  
  SQL.query(query, (err, result) => {
    if (err) {
      console.log("Error: ", err);
      res.status(500).send("An error occurred while dropping the DogOwners table.");
      return;
    }
    
    console.log("DogOwners table dropped successfully");
    res.send("DogOwners table dropped successfully");
  });
};

const CreateTable_SittingHistory = (req, res) => {
  const Q4 =
    "CREATE TABLE SittingHistory (owner VARCHAR(50) NOT NULL, sitter VARCHAR(50) NOT NULL, fromDate DATE, toDate DATE, fromTime TIME, toTime TIME, price DECIMAL(10, 2), numOfDogs INT, FOREIGN KEY (owner) REFERENCES DogOwners(email), FOREIGN KEY (sitter) REFERENCES DoggySitters(email))";

  SQL.query(Q4, (err, mySQLres) => {
    if (err) {
      console.log("error", err);
      return;
    }
    console.log('SittingHistory table created successfully');
    res.send('SittingHistory database created successfully');
  });
};


const DropTable_SittingHistory = (req, res) => {
  const query = "DROP TABLE IF EXISTS SittingHistory";
  
  SQL.query(query, (err, result) => {
    if (err) {
      console.log("Error: ", err);
      res.status(500).send("An error occurred while dropping the SittingHistory table.");
      return;
    }
    
    console.log("SittingHistory table dropped successfully");
    res.send("SittingHistory table dropped successfully");
  });
};


module.exports = {
  CreateTable_DoggySitters,
  CreateTable_Dogs,
  CreateTable_DogOwners,
  CreateTable_SittingHistory,
  DropTable_DoggySitters,
  DropTable_Dogs,
  DropTable_DogOwners,
  DropTable_SittingHistory

};

